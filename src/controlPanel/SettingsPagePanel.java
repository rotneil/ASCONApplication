/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package controlPanel;

import alertDialog.ConfirmMessageDialog;
import alertDialog.ErrorMessageDialog;
import asconDialog.EventEditDialog;
import alertDialog.SuccessMessageDialog;
import asconDialog.EventViewDialog;
import asconDialog.NewParameterDialog;
import asconDialog.ParameterEditDialog;
import asconapplication.ASCONApplication;
import asconapplication.Constants;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import listModel.EventListModel;
import listModel.EventListRenderer;
import listModel.SettingsListModel;
import objectScripts.ASCONEvent;
import objectScripts.SettingsVariable;

/**
 *
 * @author Oluwafemi Nehemiah
 * Rotneil IT Consult
 * (rotneil@yahoo.com)
 */
public final class SettingsPagePanel extends javax.swing.JPanel 
implements Constants
{
    // instance variables
    private javax.swing.JList eventList;
    private EventListModel eventListModel;
    private ASCONApplication asconApp;
    private String [] settings = new String [] {
        "Accomodation Variables", "Block Types", "Location", "Occupant Types"};
    private SettingsVariable [] settingsVariable;
    private SettingsListModel settingsListModel;
    private int chosenSettingIndex = 0;
    private String [] display = new String [] {"About ASCON College",
        "ASCON Events"};
    private final int ABOUT_ASCON = 0;
    private final int ASCON_EVENTS = 1;
    private int chosenAction = ABOUT_ASCON;
    private ASCONEvent chosenEvent;
    private String paramName;
    private long chosenParamId;
    
    /**
     * Creates new form SettingsPagePanel
     * @param ascon
     */
    public SettingsPagePanel(ASCONApplication ascon) {
        try {
            this.asconApp = ascon;
            paramName = "Accomodation Variable";
            eventList = new javax.swing.JList();
            eventListModel = new EventListModel (ascon.getSchema().getEvents());
            settingsVariable = ascon.getSchema().getSettings(chosenSettingIndex);
            settingsListModel = new SettingsListModel (
                ascon.getSchema().getSettings(SETTING.ACCOMODATION));
            initComponents();

            setDisplay (ABOUT_ASCON);
        } catch (java.sql.SQLException e) {
            ErrorMessageDialog.show(ascon, e.getClass().getSimpleName(),
                    e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        parameterPopup = new javax.swing.JPopupMenu();
        newItem = new javax.swing.JMenuItem();
        editItem = new javax.swing.JMenuItem();
        deleteItem = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        settingCombo = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        parameterList = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        homePageButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        displayCombo = new javax.swing.JComboBox();
        displayScroll = new javax.swing.JScrollPane();
        displayArea = new javax.swing.JTextArea();
        cancelDisplayButton = new javax.swing.JButton();
        displayButton = new javax.swing.JButton();

        newItem.setText("New " + paramName);
        newItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newItemActionPerformed(evt);
            }
        });
        parameterPopup.add(newItem);

        editItem.setText("Edit " + paramName);
        editItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editItemActionPerformed(evt);
            }
        });
        parameterPopup.add(editItem);

        deleteItem.setText("Delete " + paramName);
        deleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemActionPerformed(evt);
            }
        });
        parameterPopup.add(deleteItem);

        jLabel1.setText("Choose Setting Parameter: ");

        settingCombo.setModel(new DefaultComboBoxModel <String> (settings));
        settingCombo.setSelectedIndex(0);
        settingCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(settingCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(settingCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        parameterList.setModel(settingsListModel);
        parameterList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                parameterListMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                parameterListMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(parameterList);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
        );

        homePageButton.setText("Home Page");
        homePageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homePageButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addComponent(homePageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(144, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(homePageButton))
        );

        jLabel2.setText("Display Type:");

        displayCombo.setModel(new DefaultComboBoxModel (display));
        displayCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayComboActionPerformed(evt);
            }
        });

        displayScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        displayArea.setColumns(20);
        displayArea.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        displayArea.setLineWrap(true);
        displayArea.setRows(5);
        displayArea.setWrapStyleWord(true);
        displayScroll.setViewportView(displayArea);

        cancelDisplayButton.setText("Cancel");
        cancelDisplayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelDisplayButtonActionPerformed(evt);
            }
        });

        displayButton.setText("New Display");
        displayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(displayCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(displayScroll)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addComponent(cancelDisplayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(displayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(displayScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelDisplayButton)
                    .addComponent(displayButton)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(2, 2, 2)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void homePageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homePageButtonActionPerformed
        // TODO add your handling code here:
        asconApp.changeActionPage(ACTION_CONTROLLER.HOME_PAGE);
    }//GEN-LAST:event_homePageButtonActionPerformed

    private void settingComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingComboActionPerformed
        // TODO add your handling code here:
        chosenSettingIndex = settingCombo.getSelectedIndex();
        paramName = settings[chosenSettingIndex];
        updateSettingsModel ();
    }//GEN-LAST:event_settingComboActionPerformed

    private void parameterListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_parameterListMouseClicked
        // TODO add your handling code here:
        processMouseClicked (evt);
    }//GEN-LAST:event_parameterListMouseClicked

    private void displayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayButtonActionPerformed
        // TODO add your handling code here:
        // confirm the action
        if (chosenAction == ABOUT_ASCON) {
            // prompt user to confirm action
            boolean modifyText = ConfirmMessageDialog.show(asconApp,
                    "Are you sure you want to change The About ASCON content?");
            if (modifyText) {
                try {
                    // obtain user's response
                    String about = displayArea.getText();

                    // save to database
                    asconApp.getSchema().modifySettingsVariable(1, 
                            SETTING.FRONT_PAGE, about);
                    SuccessMessageDialog.show(asconApp, "Front page display "
                                + "changed successfully");
                } catch (java.sql.SQLException e) {
                    ErrorMessageDialog.show(asconApp, e.getClass().getSimpleName(), 
                            e.getMessage());
                }
            }
            
        } else {
            // launch NEw Event Dialog
            EventEditDialog dialog = new EventEditDialog (asconApp, this);
            dialog.setVisible (true);
        }
    }//GEN-LAST:event_displayButtonActionPerformed

    private void cancelDisplayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelDisplayButtonActionPerformed
        // TODO add your handling code here:
        try {
            if (chosenEvent == null)
                throw new NullPointerException ("No item has been selected! "
                        + "Select an Event Item to delete");
            
            // prompt the user for confirmation of action
            boolean goAhead = ConfirmMessageDialog.show(asconApp,
                    "Are you sure you want to delete Event item?");
            if (goAhead) {
                // delete event from the database
                asconApp.getSchema().deleteEvent (chosenEvent.getId());
                SuccessMessageDialog.show(asconApp, "Event deleted successfully!");
                eventListModel.updateList(asconApp.getSchema().getEvents());
            }
        } catch (NullPointerException | java.sql.SQLException e) {
            // prompt error message
            ErrorMessageDialog.show(asconApp, e.getClass().getSimpleName(), 
                        e.getMessage());
        }
    }//GEN-LAST:event_cancelDisplayButtonActionPerformed

    private void displayComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayComboActionPerformed
        // TODO add your handling code here:
        // change the displayScroll content
        if (displayCombo.getSelectedIndex() == ABOUT_ASCON) {
            setDisplay (ABOUT_ASCON);
            chosenAction = ABOUT_ASCON;
            chosenEvent = null;
        } else {
            setDisplay (ASCON_EVENTS);
            chosenAction = ASCON_EVENTS;
            chosenEvent = null;
            cancelDisplayButton.setText("Delete Event");
        }
    }//GEN-LAST:event_displayComboActionPerformed

    private void deleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemActionPerformed
        // TODO add your handling code here:
        // prompt the user to confirm action
        if (ConfirmMessageDialog.show(asconApp, "Are you sure you want to "
                + paramName + "?")) {
            try {
                asconApp.getSchema().deleteSettingsVariable(
                        chosenSettingIndex, chosenParamId);
                updateSettingsModel();
                SuccessMessageDialog.show(asconApp, "Setting parameter deleted" +
                        " successfully");
            } catch (java.sql.SQLException e) {
                ErrorMessageDialog.show(asconApp, e.getClass().getSimpleName(),
                        e.getMessage());
            }
        }
    }//GEN-LAST:event_deleteItemActionPerformed

    private void editItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editItemActionPerformed
        // TODO add your handling code here:
        // launch parameter edit dialog
        ParameterEditDialog editDialog = new ParameterEditDialog (asconApp, () -> {
                updateSettingsModel();
            }, chosenSettingIndex, chosenParamId
        );
        editDialog.setVisible(true);
    }//GEN-LAST:event_editItemActionPerformed

    private void newItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newItemActionPerformed
        NewParameterDialog dialog = new NewParameterDialog (asconApp, () -> {
                updateSettingsModel();
            }, chosenSettingIndex);
        dialog.setVisible (true);
    }//GEN-LAST:event_newItemActionPerformed

    private void parameterListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_parameterListMouseReleased
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            // get the clicked index
            int index = parameterList.locationToIndex(evt.getPoint());
            parameterList.setSelectedIndex(index);
            chosenParamId = settingsVariable [index].getSettingsId();
            parameterPopup.show(evt.getComponent(), evt.getX(), evt.getY());
            setSettingItemNames ();
        }
    }//GEN-LAST:event_parameterListMouseReleased

    /**
     * This method dynamically updates the text on the popup items
     */
    private void setSettingItemNames ()
    {
        newItem.setText("New " + paramName);
        editItem.setText("Edit " + paramName);
        deleteItem.setText("Delete " + paramName);
    }
    
    // method to implement list click
    private void eventListMouseClicked (java.awt.event.MouseEvent e)
    {
        // get the index at clicked point
        int index = eventList.locationToIndex(e.getPoint());
        chosenEvent = eventListModel.getElementAt(index);

        // monitor double click
        switch (e.getClickCount()) {
            case 2:
                // launch event dialog
                EventViewDialog dialog = new EventViewDialog (
                        asconApp, this, chosenEvent);
                dialog.setVisible(true);
                break;
            case 1: default:
        }
    }
    
    // method to handle mouse released action
    private void eventListMouseReleased (java.awt.event.MouseEvent evt)
    {
        if (evt.isPopupTrigger()) {
            // get index of the clicked event
            int index = eventList.locationToIndex(evt.getPoint());
            chosenEvent = eventListModel.getElementAt(index);
            
            // set up the popup and items
            JPopupMenu eventPopup = new JPopupMenu ();
            JMenuItem newEvent = new JMenuItem ("Create Event");
            JMenuItem viewEvent = new JMenuItem ("View Event");
            JMenuItem editEvent = new JMenuItem ("Edit Event");
            JMenuItem deleteEvent = new JMenuItem ("Delete Event");
            
            newEvent.addActionListener((ActionEvent e) -> {
                // launch new event dialog
                EventEditDialog dialog = new EventEditDialog (asconApp, this);
                dialog.setVisible (true);
            });
            
            viewEvent.addActionListener((ActionEvent e) -> {
                // launch new event dialog
                EventViewDialog dialog = new EventViewDialog (
                        asconApp, this, chosenEvent);
                dialog.setVisible (true);
            });
            
            editEvent.addActionListener((ActionEvent e) -> {
                // launch event edit dialog
                EventEditDialog dialog = new EventEditDialog (
                        asconApp, this, chosenEvent);
                dialog.setVisible(true);
            });
            
            deleteEvent.addActionListener((ActionEvent e) -> {
                // delete event from the database
                try {
                    // prompt the user for action
                    boolean delete = ConfirmMessageDialog.show(asconApp, 
                            "Are you sure you want to delete the event from "
                                    + "the database?");
                    if (delete) {
                        asconApp.getSchema().deleteEvent (chosenEvent.getId());
                        SuccessMessageDialog.show(asconApp, "Event deleted successfully!");
                        eventListModel.updateList(asconApp.getSchema().getEvents());
                    }
                } catch (NullPointerException | java.sql.SQLException ex) {
                    ErrorMessageDialog.show(asconApp, ex.getClass().getSimpleName(), 
                            ex.getMessage());
                }
            });
            
            eventPopup.add(newEvent);
            eventPopup.add(viewEvent);
            eventPopup.add(editEvent);
            eventPopup.add(deleteEvent);
            
            // show the popup
            eventPopup.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }
    
    // METHOD TO CHANGE THE DISPLAY CONTENT
    private void setDisplay (int content) {
        switch (content) {
            case ABOUT_ASCON:
                // change the label on the button
                displayButton.setText("Modify Text");
                
                // show the front page text on the ASCON
                displayArea.setText(asconApp.getSchema().getSettingNameById(
                        SETTING.FRONT_PAGE, 1));
                displayScroll.setViewportView(displayArea);
                break;
                
            case ASCON_EVENTS:
                // change the label on the display button
                displayButton.setText("New Event");
                
                // display the written events
                EventListRenderer eventListRenderer = new EventListRenderer ();
                eventList.setModel(eventListModel);
                eventList.setCellRenderer(eventListRenderer);
                eventList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
                eventList.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        eventListMouseClicked(evt);
                    }
                });
                eventList.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseReleased(java.awt.event.MouseEvent evt) {
                        eventListMouseReleased(evt);
                    }
                });
                displayScroll.setViewportView(eventList);
                break;
                
            default:
        }
    }
    // method process mouse clicked
    private void processMouseClicked (java.awt.event.MouseEvent event)
    {
        switch (event.getClickCount()) {
            case 1: default:
                break;
            case 2:
                int parameterIndex = parameterList.locationToIndex(event.getPoint());
                chosenParamId = settingsVariable [parameterIndex].getSettingsId();
                // launch parameter edit dialog
                ParameterEditDialog editDialog = new ParameterEditDialog (asconApp, () -> {
                        updateSettingsModel();
                    }, chosenSettingIndex, chosenParamId
                );
                editDialog.setVisible(true);
                break;
        }
    }
    // METHOD TO UPDATE THE PARAMETER LIST BASED ON USER'S INTERACTION
    public void updateSettingsModel ()
    {
        // instantiate settingsVariable
        try {
            settingsVariable = asconApp.getSchema().getSettings(
                    settingCombo.getSelectedIndex());
            settingsListModel.updateModel(settingsVariable);
            
            // update events
            eventListModel.updateList(asconApp.getSchema().getEvents());
            eventList.setModel(eventListModel);
        } catch (java.sql.SQLException e) {
            ErrorMessageDialog.show(asconApp, e.getClass().getSimpleName(),
                    e.getMessage());
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelDisplayButton;
    private javax.swing.JMenuItem deleteItem;
    private javax.swing.JTextArea displayArea;
    private javax.swing.JButton displayButton;
    private javax.swing.JComboBox displayCombo;
    private javax.swing.JScrollPane displayScroll;
    private javax.swing.JMenuItem editItem;
    private javax.swing.JButton homePageButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem newItem;
    private javax.swing.JList parameterList;
    private javax.swing.JPopupMenu parameterPopup;
    private javax.swing.JComboBox settingCombo;
    // End of variables declaration//GEN-END:variables
    
                
}

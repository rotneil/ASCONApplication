/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package asconDialog;

import alertDialog.ConfirmMessageDialog;
import alertDialog.ErrorMessageDialog;
import alertDialog.SuccessMessageDialog;
import asconapplication.ASCONApplication;
import asconapplication.Constants;
import controlPanel.SettingsPagePanel;
import java.util.Calendar;
import javax.swing.DefaultComboBoxModel;
import objectScripts.ASCONEvent;

/**
 *
 * @author Oluwafemi Nehemiah
 * Rotneil IT Consult
 * rotneil@yahoo.com
 */
public final class EventEditDialog extends javax.swing.JDialog implements Constants{

    // instance variables
    private ASCONApplication parent;
    private SettingsPagePanel host;
    private ASCONEvent mEvent;
    
    private int chosenDay;
    private int chosenMonth;
    private int chosenYear;
    
    private final String [] day;
    private final String [] month;
    private final String [] year;
    
    private boolean fieldsCleared = false;
    
    /**
     * Creates new form EventDialog
     */
    public EventEditDialog (ASCONApplication parent, SettingsPagePanel host) {
        this (parent, host, null);
    }
    
    public EventEditDialog(ASCONApplication parent, SettingsPagePanel host,
            ASCONEvent event) {
        super(parent, true);
        
        this.parent = parent;
        this.host = host;
        this.mEvent = event;
        
        day = parent.getDaysOfMonth();
        month = parent.getMonthOfYear();
        year = parent.getYear();
        
        initComponents();
        
        // set the date combos to reflect current date
        Calendar cal = Calendar.getInstance();
        cal.setTimeInMillis(System.currentTimeMillis());
        dayCombo.setSelectedIndex(cal.get(Calendar.DAY_OF_MONTH) - 1);
        monthCombo.setSelectedIndex(cal.get(Calendar.MONTH));
        yearCombo.setSelectedIndex(cal.get(Calendar.YEAR) - YEAR_START);
        
        // adjust event button to suilt caller
        setParams ();
        setLocationRelativeTo (host);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dayCombo = new javax.swing.JComboBox();
        monthCombo = new javax.swing.JComboBox();
        yearCombo = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        eventTextArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        clearButton = new javax.swing.JButton();
        eventButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Set Date: ");

        dayCombo.setModel(new DefaultComboBoxModel <String> (day));
        dayCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayComboActionPerformed(evt);
            }
        });

        monthCombo.setModel(new DefaultComboBoxModel<String>(month));
        monthCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthComboActionPerformed(evt);
            }
        });

        yearCombo.setModel(new DefaultComboBoxModel<String>(year));
        yearCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearComboActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        eventTextArea.setColumns(20);
        eventTextArea.setLineWrap(true);
        eventTextArea.setRows(5);
        eventTextArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(eventTextArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(monthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(yearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE))
        );

        clearButton.setText("Clear Page");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        eventButton.setText("Save");
        eventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(clearButton)
                .addComponent(eventButton)
                .addComponent(cancelButton))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void yearComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearComboActionPerformed
        // TODO add your handling code here:
        chosenYear = yearCombo.getSelectedIndex() + 1960;
        chosenDay = getDay (chosenYear, chosenMonth, chosenDay);
        dayCombo.setSelectedIndex(chosenDay);
        fieldsCleared = false;
    }//GEN-LAST:event_yearComboActionPerformed

    private void monthComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthComboActionPerformed
        // TODO add your handling code here:
        chosenMonth = monthCombo.getSelectedIndex();
        chosenDay = getDay (chosenYear, chosenMonth, chosenDay);
        dayCombo.setSelectedIndex(chosenDay);
        fieldsCleared = false;
    }//GEN-LAST:event_monthComboActionPerformed

    private void dayComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayComboActionPerformed
        // TODO add your handling code here:
        chosenDay = getDay(chosenYear, chosenMonth, dayCombo.getSelectedIndex());
        dayCombo.setSelectedIndex(chosenDay);
        fieldsCleared = false;
    }//GEN-LAST:event_dayComboActionPerformed

    private void eventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventButtonActionPerformed
        // TODO add your handling code here:
        processButtonAction ();
    }//GEN-LAST:event_eventButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        clearAction ();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        cancelAction();
    }//GEN-LAST:event_cancelButtonActionPerformed

    
    // METHOD TO CANCEL USER'S ACTION
    private void clearAction ()
    {
        // during writing
        if (!fieldsCleared) {
            // prompt user for clearing of fields
            boolean clear = ConfirmMessageDialog.show(parent, 
                    "Are you sure you want to clear fields?");
            if (clear) {
                // clear fields
                eventTextArea.setText("");
                fieldsCleared = true;
            }
        }
    }
    
    // method to cancel the page
    private void cancelAction ()
    {
        // dispose dialog
        setVisible (false);
        host.updateSettingsModel();
    }
    
    // METHOD TO PROCESS BUTTON ACTION
    private void processButtonAction ()
    {
        // extract variables for date
        Calendar cal = Calendar.getInstance();
        cal.set(chosenYear, chosenMonth, chosenDay + 1);
        long time = cal.getTimeInMillis();
        String message = eventTextArea.getText();
            
        try {
            // option create new event
            if (mEvent == null) {
                // save to database
                parent.getSchema().createEvent(time, message);
                SuccessMessageDialog.show(parent, "Event Saved Successfully");
                host.updateSettingsModel();
                setVisible (false);
            } else {
                // option to modify
                parent.getSchema().updateEvent(mEvent.getId(), time, message);
                SuccessMessageDialog.show(parent, "Event updated Successfully");
                host.updateSettingsModel();
                setVisible (false);
            }
        } catch (Exception e) {
            ErrorMessageDialog.show(parent, e.getClass().getSimpleName(), 
                    e.getMessage());
        }
    }

    // METHOD TO ASSIGN THE DAY
    // method to set an appropriate month day
    private int getDay (int year, int month, int day) {
        switch (month) {
            case 1: // FEBRUARY
                if (day > 27) {
                    if (year % 4 == 0)
                        return 28;
                    else
                        return 27;
                } else
                    return day;
            case 3: // APRIL
            case 5: // JUNE
            case 8: // SEPTEMBER
            case 10: // NOVEMBER
                if (day > 29)
                    return 29;
                else
                    return day;
            default:
                return day;
        }
    }
    
    
    // METHOD TO ADJUST PAGE TO THE CALLER
    private void setParams ()
    {
        if (mEvent == null) {
            eventButton.setText("Create Event");
        } else {
            eventButton.setText("Update Event");
            
            // get event date and message
            eventTextArea.setText(mEvent.getMessage());
            Calendar cal = Calendar.getInstance();
            cal.setTimeInMillis(mEvent.getDate());
            chosenDay = cal.get(Calendar.DAY_OF_MONTH);
            chosenMonth = cal.get(Calendar.MONTH);
            chosenYear = cal.get(Calendar.YEAR);
            dayCombo.setSelectedIndex(chosenDay - 1);
            monthCombo.setSelectedIndex(chosenMonth);
            yearCombo.setSelectedIndex(chosenYear - 1960);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JComboBox dayCombo;
    private javax.swing.JButton eventButton;
    private javax.swing.JTextArea eventTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox monthCombo;
    private javax.swing.JComboBox yearCombo;
    // End of variables declaration//GEN-END:variables
}
